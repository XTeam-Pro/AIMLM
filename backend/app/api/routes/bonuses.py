from fastapi import APIRouter
from uuid import UUID
from typing import Dict


from app.api.dependencies.deps import CommittedSessionDep
from app.api.services.binary_bonus_service import BinaryBonusService
from app.api.services.generation_bonus_service import GenerationBonusService
from app.api.services.sponsor_bonus_service import SponsorBonusService

from app.core.postgres.dao import BonusDAO


router = APIRouter(prefix="/bonuses", tags=["bonuses"])


@router.get("/generation/{user_id}", response_model=Dict[int, float])
def get_generation_bonus(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Calculate generation bonus for a given user.

    This bonus is based on the personal volume (PV) of users
    in the referral tree up to N levels deep, multiplied by
    percentage rates defined in GenerationBonusMatrix.
    """
    service = GenerationBonusService(session)
    return service.calculate(user_id)


@router.get("/binary/{user_id}")
def get_binary_bonus(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Calculate binary bonus for each business center of the user.

    Uses left and right volumes per center and applies
    a fixed percentage (default 10%) to the weaker leg.
    """
    service = BinaryBonusService(session)
    return service.calculate(user_id)


@router.get("/sponsor/{user_id}")
def get_sponsor_bonus(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Calculate sponsor bonus for direct referrals (level 1).

    Based on 5% of the PV generated by each level 1 descendant.
    """
    service = SponsorBonusService(session)
    return service.calculate(user_id)


@router.get("/summary/{user_id}")
def get_total_bonus_summary(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Get total bonus summary for a user.

    Returns generation bonus, binary bonus, sponsor bonus,
    and their combined total.
    """
    gen_service = GenerationBonusService(session)
    bin_service = BinaryBonusService(session)
    sponsor_service = SponsorBonusService(session)

    generation_bonus = gen_service.calculate(user_id)
    binary_bonus = bin_service.calculate(user_id)
    sponsor_bonus = sponsor_service.calculate(user_id)

    return {
        "generation_bonus": sum(generation_bonus.values()),
        "binary_bonus": sum([b["bonus"] for b in binary_bonus.values()]),
        "sponsor_bonus": sponsor_bonus["total"],
        "total": (
            sum(generation_bonus.values()) +
            sum([b["bonus"] for b in binary_bonus.values()]) +
            sponsor_bonus["total"]
        )
    }


@router.get("/history/{user_id}")
def get_bonus_history(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Retrieve bonus history for a given user.

    Returns all bonus records from the Bonus table
    associated with the user.
    """
    bonus_dao = BonusDAO(session)
    bonuses = bonus_dao.find_all(filters={"user_id": user_id})
    return bonuses