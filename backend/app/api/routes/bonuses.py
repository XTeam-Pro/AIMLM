from fastapi import APIRouter
from uuid import UUID



from app.api.dependencies.deps import CommittedSessionDep
from app.api.services.binary_bonus_service import BinaryBonusService
from app.api.services.generation_bonus_service import GenerationBonusService
from app.api.services.sponsor_bonus_service import SponsorBonusService

from app.core.postgres.dao import BonusDAO
from app.schemas.mlm import BonusCreate, BonusPublic

router = APIRouter(prefix="/bonuses", tags=["bonuses"])


@router.post("/generation/calculate", response_model=list[BonusCreate])
def calculate_all_generation_bonuses(
    session: CommittedSessionDep
):
    """
    Calculate generation bonuses for all users.
    """
    service = GenerationBonusService(session)
    return service.calculate()
@router.get("/binary/{user_id}", response_model=dict[int, dict[str, float]])
def get_binary_bonus(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Calculate binary bonus for each business center of the user.

    Applies fixed percentage (e.g. 10%) to the weaker leg volume.
    """
    service = BinaryBonusService(session)
    return service.calculate(user_id)


@router.get("/sponsor/{user_id}", response_model=dict[str, float])
def get_sponsor_bonus(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Calculate sponsor bonus for direct referrals (level 1).

    Based on 5% of the PV generated by each level 1 descendant.
    """
    service = SponsorBonusService(session)
    return service.calculate(user_id)


@router.get("/generation/{user_id}", response_model=dict[int, float])
def get_generation_bonus(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Calculate generation bonus for a given user.

    Based on binary bonuses earned by descendants up to 7 levels deep.
    """
    service = GenerationBonusService(session)
    return service.calculate_for_user(user_id)


@router.get("/summary/{user_id}", response_model=dict[str, float])
def get_total_bonus_summary(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Get total bonus summary for a user across all types.

    Includes generation, binary, sponsor, and total bonuses.
    """
    gen_service = GenerationBonusService(session)
    bin_service = BinaryBonusService(session)
    sponsor_service = SponsorBonusService(session)

    generation = gen_service.calculate_for_user(user_id)
    binary = bin_service.calculate(user_id)
    sponsor = sponsor_service.calculate(user_id)

    generation_total = sum(generation.values())
    binary_total = sum([b["bonus"] for b in binary.values()])
    sponsor_total = sponsor["total"]

    return {
        "generation_bonus": generation_total,
        "binary_bonus": binary_total,
        "sponsor_bonus": sponsor_total,
        "total": generation_total + binary_total + sponsor_total
    }


@router.get("/history/{user_id}", response_model=list[BonusPublic])
def get_bonus_history(
    user_id: UUID,
    session: CommittedSessionDep
):
    """
    Retrieve full bonus history for a user.

    Returns all bonuses stored in the Bonus table.
    """
    dao = BonusDAO(session)
    return dao.find_all(filters={"user_id": user_id})