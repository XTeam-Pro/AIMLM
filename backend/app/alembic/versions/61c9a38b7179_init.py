"""init

Revision ID: 61c9a38b7179
Revises: 
Create Date: 2025-04-10 15:54:55.349735

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = '61c9a38b7179'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('achievements',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tier', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('points_required', sa.Numeric(), nullable=False),
    sa.Column('is_secret', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('challenge_teams',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('captain_id', sa.Uuid(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('total_pv', sa.Numeric(), nullable=False),
    sa.Column('total_sales', sa.Numeric(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('generation_bonus_matrix',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('rank', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('generation', sa.Integer(), nullable=False),
    sa.Column('bonus_percentage', sa.Numeric(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('products',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('pv_value', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('image_url', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('webinar_link', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_collection', sa.Boolean(), nullable=False),
    sa.Column('collection_items', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('time_zones',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('offset', sqlmodel.sql.sqltypes.AutoString(length=6), nullable=False),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('postcode', sqlmodel.sql.sqltypes.AutoString(length=12), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
    sa.Column('registration_date', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('rank', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('mentor_id', sa.Uuid(), nullable=True),
    sa.Column('team_id', sa.Uuid(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('cart_items',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('product_id', sa.Uuid(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('added_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('challenges',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('challenge_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('reward_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('reward_value', sa.Numeric(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transactions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('buyer_id', sa.Uuid(), nullable=False),
    sa.Column('seller_id', sa.Uuid(), nullable=False),
    sa.Column('cash_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('pv_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'FAILED', 'COMPLETED', name='transactionstatus'), nullable=False),
    sa.Column('product_id', sa.Uuid(), nullable=True),
    sa.Column('achievement_id', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('additional_info', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_achievements',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('achievement_id', sa.Uuid(), nullable=False),
    sa.Column('is_unlocked', sa.Boolean(), nullable=False),
    sa.Column('unlocked_at', sa.DateTime(), nullable=True),
    sa.Column('progress', sa.Numeric(), nullable=False),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievements.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_hierarchy',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('ancestor_id', sa.Uuid(), nullable=False),
    sa.Column('descendant_id', sa.Uuid(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_mlm',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('contract_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('current_rank', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('current_club', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('personal_volume', sa.Numeric(), nullable=False),
    sa.Column('group_volume', sa.Numeric(), nullable=False),
    sa.Column('accumulated_volume', sa.Numeric(), nullable=False),
    sa.Column('binary_volume_left', sa.Numeric(), nullable=False),
    sa.Column('binary_volume_right', sa.Numeric(), nullable=False),
    sa.Column('sponsor_id', sa.Uuid(), nullable=True),
    sa.Column('placement_sponsor_id', sa.Uuid(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('user_product_interactions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('product_id', sa.Uuid(), nullable=True),
    sa.Column('interaction_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('pv_awarded', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('interaction_date', sa.DateTime(), nullable=False),
    sa.Column('achievement_id', sa.Uuid(), nullable=True),
    sa.Column('additional_info', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievements.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bonuses',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('bonus_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('amount', sa.Numeric(), nullable=False),
    sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('calculation_period', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_paid', sa.Boolean(), nullable=False),
    sa.Column('paid_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_mlm.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('business_centers',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('center_number', sa.Integer(), nullable=False),
    sa.Column('left_volume', sa.Numeric(), nullable=False),
    sa.Column('right_volume', sa.Numeric(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user_mlm.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('challenge_participants',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('challenge_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=True),
    sa.Column('team_id', sa.Uuid(), nullable=True),
    sa.Column('current_progress', sa.Numeric(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('reward_issued', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['challenge_id'], ['challenges.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['challenge_teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('purchases',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('is_starter', sa.Boolean(), nullable=False),
    sa.Column('purchase_date', sa.DateTime(), nullable=False),
    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('pv_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_client_purchase', sa.Boolean(), nullable=False),
    sa.Column('client_id', sa.Uuid(), nullable=True),
    sa.Column('transaction_id', sa.Uuid(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_activities',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('activity_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('period_start', sa.DateTime(), nullable=False),
    sa.Column('period_end', sa.DateTime(), nullable=False),
    sa.Column('personal_volume', sa.Numeric(), nullable=False),
    sa.Column('is_confirmed', sa.Boolean(), nullable=False),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_rank_history',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('rank', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('club', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('achieved_at', sa.DateTime(), nullable=False),
    sa.Column('qualification_period', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('group_volume', sa.Numeric(), nullable=False),
    sa.Column('personal_volume', sa.Numeric(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('purchase_items',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('purchase_id', sa.Uuid(), nullable=False),
    sa.Column('product_id', sa.Uuid(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('pv_value', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('total_price', sa.Numeric(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_foreign_key('fk_users_mentor_id', 'users', 'users', ['mentor_id'], ['id'])
    op.create_foreign_key('fk_users_team_id', 'users', 'challenge_teams', ['team_id'], ['id'])

    # Create foreign keys for the challenge_teams table
    op.create_foreign_key('fk_challenge_teams_captain_id', 'challenge_teams', 'users', ['captain_id'], ['id'])

    # Create foreign key for the purchases table
    op.create_foreign_key('fk_purchase_user_id', 'purchases', 'users', ['user_id'], ['id'])
    op.create_foreign_key('fk_purchase_client_id', 'purchases', 'users', ['client_id'], ['id'])
    op.create_foreign_key('fk_purchase_transaction_id', 'purchases', 'transactions', ['transaction_id'], ['id'])

    # Create foreign keys for purchase_items table
    op.create_foreign_key('fk_purchase_item_purchase_id', 'purchase_items', 'purchases', ['purchase_id'], ['id'])
    op.create_foreign_key('fk_purchase_item_product_id', 'purchase_items', 'products', ['product_id'], ['id'])

    # Create foreign keys for transactions table
    op.create_foreign_key('fk_transaction_achievement_id', 'transactions', 'achievements', ['achievement_id'], ['id'])
    op.create_foreign_key('fk_transaction_buyer_id', 'transactions', 'users', ['buyer_id'], ['id'])
    op.create_foreign_key('fk_transaction_product_id', 'transactions', 'products', ['product_id'], ['id'])
    op.create_foreign_key('fk_transaction_seller_id', 'transactions', 'users', ['seller_id'], ['id'])

    # Create foreign keys for user_achievements table
    op.create_foreign_key('fk_user_achievement_user_id', 'user_achievements', 'users', ['user_id'], ['id'])
    op.create_foreign_key('fk_user_achievement_achievement_id', 'user_achievements', 'achievements', ['achievement_id'], ['id'])

    # Create foreign keys for user_mlm table
    op.create_foreign_key('fk_user_mlm_user_id', 'user_mlm', 'users', ['user_id'], ['id'])
    op.create_foreign_key('fk_user_mlm_placement_sponsor_id', 'user_mlm', 'users', ['placement_sponsor_id'], ['id'])
    op.create_foreign_key('fk_user_mlm_sponsor_id', 'user_mlm', 'users', ['sponsor_id'], ['id'])

    # Create foreign keys for user_hierarchy table
    op.create_foreign_key('fk_user_hierarchy_ancestor_id', 'user_hierarchy', 'users', ['ancestor_id'], ['id'])
    op.create_foreign_key('fk_user_hierarchy_descendant_id', 'user_hierarchy', 'users', ['descendant_id'], ['id'])

    # Create foreign keys for challenge_participants table
    op.create_foreign_key('fk_challenge_participant_challenge_id', 'challenge_participants', 'challenges', ['challenge_id'], ['id'])
    op.create_foreign_key('fk_challenge_participant_team_id', 'challenge_participants', 'challenge_teams', ['team_id'], ['id'])
    op.create_foreign_key('fk_challenge_participant_user_id', 'challenge_participants', 'users', ['user_id'], ['id'])


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('purchase_items')
    op.drop_table('user_rank_history')
    op.drop_table('user_activities')
    op.drop_table('purchases')
    op.drop_table('challenge_participants')
    op.drop_table('business_centers')
    op.drop_table('bonuses')
    op.drop_table('user_product_interactions')
    op.drop_table('user_mlm')
    op.drop_table('user_hierarchy')
    op.drop_table('user_achievements')
    op.drop_table('transactions')
    op.drop_table('challenges')
    op.drop_table('cart_items')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('time_zones')
    op.drop_table('products')
    op.drop_table('generation_bonus_matrix')
    op.drop_table('challenge_teams')
    op.drop_table('achievements')
    # ### end Alembic commands ###
